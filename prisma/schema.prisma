generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id               String          @id @default(cuid()) @map("id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime?       @updatedAt @map("updated_at")
  email            String?         @unique
  givenName        String?
  familyName       String?
  organizationName String?
  emailVerified    Boolean?        @map("email_verified")
  passwordHash     String?         @map("password_hash")
  employee         Boolean         @default(false)
  admin            Boolean         @default(false)
  contactInfo      ContactInfo[]
  customerInvoices Invoice[]
  customerLeases   Lease[]         @relation("customer")
  employeeLeases   Lease[]         @relation("employee")
  paymentMade      PaymentRecord[] @relation("customer")
  paymentReceived  PaymentRecord[] @relation("employee")
  session          Session[]
  verification     Verification[]

  @@unique([id, email])
  @@unique([email, givenName, familyName])
  @@index([id, email])
  @@map("users")
}

model ContactInfo {
  contactId          String   @id @default(cuid())
  userId             String
  address1           String
  address2           String?
  address3           String?
  city               String
  state              String
  zip                String
  phoneNum1          String
  phoneNum2          String?
  phoneNum1Validated Boolean  @default(false)
  phoneNum2Validated Boolean? @default(false)
  softDelete         Boolean  @default(false)
  user               User     @relation(fields: [userId], references: [id], onUpdate: NoAction)
  leases             Lease[]
}

model Unit {
  num             String  @id
  building        String
  size            String
  description     String
  leasedPrice     Int?
  advertisedPrice Int
  deposit         Int
  notes           String?
  unavailable     Boolean @default(false)
  lease           Lease[]

  @@index([num(sort: Desc)])
}

model Lease {
  leaseId            String      @id @default(cuid())
  customerId         String
  employeeId         String
  contactInfoId      String
  unitNum            String
  price              Int
  leaseCreatedAt     DateTime    @default(now())
  leaseReturnedAt    DateTime?
  leaseEffectiveDate DateTime
  leaseEnded         DateTime?
  dropboxURL         String?
  anvilEID           String?
  invoices           Invoice[]
  contactInfo        ContactInfo @relation(fields: [contactInfoId], references: [contactId], onDelete: NoAction, onUpdate: NoAction)
  customer           User        @relation("customer", fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee           User        @relation("employee", fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit               Unit        @relation(fields: [unitNum], references: [num])

  @@unique([leaseId, unitNum, price])
  @@index([leaseId, leaseCreatedAt(sort: Desc)])
}

model PaymentRecord {
  paymentId        String      @id @default(cuid())
  customerId       String
  unitNum          String?
  paymentAmount    Int
  receiverId       String?
  payee            String?
  paymentCreated   DateTime    @default(now())
  paymentCompleted DateTime?
  paymentType      PaymentType
  invoiceId        String?
  invoice          Invoice?
  customer         User        @relation("customer", fields: [customerId], references: [id])
  receiver         User?       @relation("employee", fields: [receiverId], references: [id])

  @@unique([paymentCompleted, paymentId])
  @@index([paymentId, paymentCompleted(sort: Desc)])
}

model Invoice {
  invoiceId       String         @id @default(cuid())
  customerId      String?
  leaseId         String?
  unitNum         String
  price           Int
  invoiceAmount   Int
  invoiceCreated  DateTime       @default(now())
  paymentRecordId String?        @unique
  invoicePaid     DateTime?      @unique
  invoiceNotes    String?
  customer        User?          @relation(fields: [customerId], references: [id])
  lease           Lease?         @relation(fields: [leaseId, unitNum, price], references: [leaseId, unitNum, price])
  paymentRecord   PaymentRecord? @relation(fields: [paymentRecordId, invoicePaid], references: [paymentId, paymentCompleted])

  @@unique([paymentRecordId, invoicePaid])
  @@index([invoiceId, invoiceCreated(sort: Desc)])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id        String   @id @default(cuid())
  code      String
  userId    String   @map("user_id")
  email     String
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId, email], references: [id, email])
}

model PasswordReset {
  tokenHash String   @unique @map("token_hash")
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
}

enum PaymentType {
  STRIPE
  CASH
  CHECK
}
